# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ndt_map/NDTCellMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NDTCellMsg(genpy.Message):
  _md5sum = "5de462e5aea799b2fcf5b028c0840eb6"
  _type = "ndt_map/NDTCellMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#In this file we define a sinngle ndt cell message
float64 mean_x       #x coordinate of mean
float64 mean_y       #y coordinate of mean
float64 mean_z       #z coordinate of mean
float64[] cov_matrix #covariance matrix
float64 occupancy    #occupancy
int64 N              #point count"""
  __slots__ = ['mean_x','mean_y','mean_z','cov_matrix','occupancy','N']
  _slot_types = ['float64','float64','float64','float64[]','float64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mean_x,mean_y,mean_z,cov_matrix,occupancy,N

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NDTCellMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mean_x is None:
        self.mean_x = 0.
      if self.mean_y is None:
        self.mean_y = 0.
      if self.mean_z is None:
        self.mean_z = 0.
      if self.cov_matrix is None:
        self.cov_matrix = []
      if self.occupancy is None:
        self.occupancy = 0.
      if self.N is None:
        self.N = 0
    else:
      self.mean_x = 0.
      self.mean_y = 0.
      self.mean_z = 0.
      self.cov_matrix = []
      self.occupancy = 0.
      self.N = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.mean_x, _x.mean_y, _x.mean_z))
      length = len(self.cov_matrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.cov_matrix))
      _x = self
      buff.write(_get_struct_dq().pack(_x.occupancy, _x.N))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.mean_x, _x.mean_y, _x.mean_z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cov_matrix = s.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.occupancy, _x.N,) = _get_struct_dq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.mean_x, _x.mean_y, _x.mean_z))
      length = len(self.cov_matrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.cov_matrix.tostring())
      _x = self
      buff.write(_get_struct_dq().pack(_x.occupancy, _x.N))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.mean_x, _x.mean_y, _x.mean_z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cov_matrix = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.occupancy, _x.N,) = _get_struct_dq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_dq = None
def _get_struct_dq():
    global _struct_dq
    if _struct_dq is None:
        _struct_dq = struct.Struct("<dq")
    return _struct_dq
