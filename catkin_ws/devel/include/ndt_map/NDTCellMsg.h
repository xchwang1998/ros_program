// Generated by gencpp from file ndt_map/NDTCellMsg.msg
// DO NOT EDIT!


#ifndef NDT_MAP_MESSAGE_NDTCELLMSG_H
#define NDT_MAP_MESSAGE_NDTCELLMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ndt_map
{
template <class ContainerAllocator>
struct NDTCellMsg_
{
  typedef NDTCellMsg_<ContainerAllocator> Type;

  NDTCellMsg_()
    : mean_x(0.0)
    , mean_y(0.0)
    , mean_z(0.0)
    , cov_matrix()
    , occupancy(0.0)
    , N(0)  {
    }
  NDTCellMsg_(const ContainerAllocator& _alloc)
    : mean_x(0.0)
    , mean_y(0.0)
    , mean_z(0.0)
    , cov_matrix(_alloc)
    , occupancy(0.0)
    , N(0)  {
  (void)_alloc;
    }



   typedef double _mean_x_type;
  _mean_x_type mean_x;

   typedef double _mean_y_type;
  _mean_y_type mean_y;

   typedef double _mean_z_type;
  _mean_z_type mean_z;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _cov_matrix_type;
  _cov_matrix_type cov_matrix;

   typedef double _occupancy_type;
  _occupancy_type occupancy;

   typedef int64_t _N_type;
  _N_type N;





  typedef boost::shared_ptr< ::ndt_map::NDTCellMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ndt_map::NDTCellMsg_<ContainerAllocator> const> ConstPtr;

}; // struct NDTCellMsg_

typedef ::ndt_map::NDTCellMsg_<std::allocator<void> > NDTCellMsg;

typedef boost::shared_ptr< ::ndt_map::NDTCellMsg > NDTCellMsgPtr;
typedef boost::shared_ptr< ::ndt_map::NDTCellMsg const> NDTCellMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ndt_map::NDTCellMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ndt_map::NDTCellMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ndt_map::NDTCellMsg_<ContainerAllocator1> & lhs, const ::ndt_map::NDTCellMsg_<ContainerAllocator2> & rhs)
{
  return lhs.mean_x == rhs.mean_x &&
    lhs.mean_y == rhs.mean_y &&
    lhs.mean_z == rhs.mean_z &&
    lhs.cov_matrix == rhs.cov_matrix &&
    lhs.occupancy == rhs.occupancy &&
    lhs.N == rhs.N;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ndt_map::NDTCellMsg_<ContainerAllocator1> & lhs, const ::ndt_map::NDTCellMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ndt_map

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ndt_map::NDTCellMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ndt_map::NDTCellMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ndt_map::NDTCellMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ndt_map::NDTCellMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ndt_map::NDTCellMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ndt_map::NDTCellMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ndt_map::NDTCellMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5de462e5aea799b2fcf5b028c0840eb6";
  }

  static const char* value(const ::ndt_map::NDTCellMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5de462e5aea799b2ULL;
  static const uint64_t static_value2 = 0xfcf5b028c0840eb6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ndt_map::NDTCellMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ndt_map/NDTCellMsg";
  }

  static const char* value(const ::ndt_map::NDTCellMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ndt_map::NDTCellMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#In this file we define a sinngle ndt cell message\n"
"float64 mean_x       #x coordinate of mean\n"
"float64 mean_y       #y coordinate of mean\n"
"float64 mean_z       #z coordinate of mean\n"
"float64[] cov_matrix #covariance matrix\n"
"float64 occupancy    #occupancy\n"
"int64 N              #point count\n"
;
  }

  static const char* value(const ::ndt_map::NDTCellMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ndt_map::NDTCellMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mean_x);
      stream.next(m.mean_y);
      stream.next(m.mean_z);
      stream.next(m.cov_matrix);
      stream.next(m.occupancy);
      stream.next(m.N);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NDTCellMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ndt_map::NDTCellMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ndt_map::NDTCellMsg_<ContainerAllocator>& v)
  {
    s << indent << "mean_x: ";
    Printer<double>::stream(s, indent + "  ", v.mean_x);
    s << indent << "mean_y: ";
    Printer<double>::stream(s, indent + "  ", v.mean_y);
    s << indent << "mean_z: ";
    Printer<double>::stream(s, indent + "  ", v.mean_z);
    s << indent << "cov_matrix[]" << std::endl;
    for (size_t i = 0; i < v.cov_matrix.size(); ++i)
    {
      s << indent << "  cov_matrix[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cov_matrix[i]);
    }
    s << indent << "occupancy: ";
    Printer<double>::stream(s, indent + "  ", v.occupancy);
    s << indent << "N: ";
    Printer<int64_t>::stream(s, indent + "  ", v.N);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NDT_MAP_MESSAGE_NDTCELLMSG_H
