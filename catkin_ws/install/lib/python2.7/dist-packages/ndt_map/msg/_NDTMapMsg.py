# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ndt_map/NDTMapMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ndt_map.msg
import std_msgs.msg

class NDTMapMsg(genpy.Message):
  _md5sum = "6aa3635c67f9abc249181bdf6529236b"
  _type = "ndt_map/NDTMapMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#In this file we define map message that will be published
Header header          #standard header information
float64 x_size         #in meters
float64 y_size         #in meters
float64 z_size         #in meters
float64 x_cen          #cneter of the map
float64 y_cen          #cneter of the map
float64 z_cen          #cneter of the map
float64 x_cell_size    #cell size
float64 y_cell_size    #cell size
float64 z_cell_size    #cell size

NDTCellMsg[] cells     #cells

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ndt_map/NDTCellMsg
#In this file we define a sinngle ndt cell message
float64 mean_x       #x coordinate of mean
float64 mean_y       #y coordinate of mean
float64 mean_z       #z coordinate of mean
float64[] cov_matrix #covariance matrix
float64 occupancy    #occupancy
int64 N              #point count"""
  __slots__ = ['header','x_size','y_size','z_size','x_cen','y_cen','z_cen','x_cell_size','y_cell_size','z_cell_size','cells']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','ndt_map/NDTCellMsg[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,x_size,y_size,z_size,x_cen,y_cen,z_cen,x_cell_size,y_cell_size,z_cell_size,cells

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NDTMapMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.x_size is None:
        self.x_size = 0.
      if self.y_size is None:
        self.y_size = 0.
      if self.z_size is None:
        self.z_size = 0.
      if self.x_cen is None:
        self.x_cen = 0.
      if self.y_cen is None:
        self.y_cen = 0.
      if self.z_cen is None:
        self.z_cen = 0.
      if self.x_cell_size is None:
        self.x_cell_size = 0.
      if self.y_cell_size is None:
        self.y_cell_size = 0.
      if self.z_cell_size is None:
        self.z_cell_size = 0.
      if self.cells is None:
        self.cells = []
    else:
      self.header = std_msgs.msg.Header()
      self.x_size = 0.
      self.y_size = 0.
      self.z_size = 0.
      self.x_cen = 0.
      self.y_cen = 0.
      self.z_cen = 0.
      self.x_cell_size = 0.
      self.y_cell_size = 0.
      self.z_cell_size = 0.
      self.cells = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9d().pack(_x.x_size, _x.y_size, _x.z_size, _x.x_cen, _x.y_cen, _x.z_cen, _x.x_cell_size, _x.y_cell_size, _x.z_cell_size))
      length = len(self.cells)
      buff.write(_struct_I.pack(length))
      for val1 in self.cells:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.mean_x, _x.mean_y, _x.mean_z))
        length = len(val1.cov_matrix)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.cov_matrix))
        _x = val1
        buff.write(_get_struct_dq().pack(_x.occupancy, _x.N))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cells is None:
        self.cells = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.x_size, _x.y_size, _x.z_size, _x.x_cen, _x.y_cen, _x.z_cen, _x.x_cell_size, _x.y_cell_size, _x.z_cell_size,) = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cells = []
      for i in range(0, length):
        val1 = ndt_map.msg.NDTCellMsg()
        _x = val1
        start = end
        end += 24
        (_x.mean_x, _x.mean_y, _x.mean_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.cov_matrix = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.occupancy, _x.N,) = _get_struct_dq().unpack(str[start:end])
        self.cells.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9d().pack(_x.x_size, _x.y_size, _x.z_size, _x.x_cen, _x.y_cen, _x.z_cen, _x.x_cell_size, _x.y_cell_size, _x.z_cell_size))
      length = len(self.cells)
      buff.write(_struct_I.pack(length))
      for val1 in self.cells:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.mean_x, _x.mean_y, _x.mean_z))
        length = len(val1.cov_matrix)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.cov_matrix.tostring())
        _x = val1
        buff.write(_get_struct_dq().pack(_x.occupancy, _x.N))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cells is None:
        self.cells = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.x_size, _x.y_size, _x.z_size, _x.x_cen, _x.y_cen, _x.z_cen, _x.x_cell_size, _x.y_cell_size, _x.z_cell_size,) = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cells = []
      for i in range(0, length):
        val1 = ndt_map.msg.NDTCellMsg()
        _x = val1
        start = end
        end += 24
        (_x.mean_x, _x.mean_y, _x.mean_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.cov_matrix = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _x = val1
        start = end
        end += 16
        (_x.occupancy, _x.N,) = _get_struct_dq().unpack(str[start:end])
        self.cells.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_dq = None
def _get_struct_dq():
    global _struct_dq
    if _struct_dq is None:
        _struct_dq = struct.Struct("<dq")
    return _struct_dq
